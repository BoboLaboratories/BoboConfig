import java.time.LocalDateTime

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'maven-publish'
    id 'java-library'
}

group = 'net.bobolabs'
version = '1.0.2'

repositories {
    maven { url = 'https://repo.bobolabs.net/repository/maven-public/' }    // :D
    maven { url = 'https://repo.papermc.io/repository/maven-public/' }      // Paper
}

dependencies {
    compileOnly 'net.bobolabs:core:[0.0.4,)'                                // core module
    compileOnly 'org.yaml:snakeyaml:1.33-SNAPSHOT'                          // snakeyaml
    compileOnly 'org.jetbrains:annotations:24.0.1'                          // JetBrains annotation

    implementation 'net.md-5:bungeecord-config:1.19-R0.1-SNAPSHOT'          // md_5 config

    // Test
    testImplementation 'net.bobolabs:core:[0.0.1,)'
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

test {
    useJUnitPlatform()
}

publishing {
    repositories {
        maven {
            name = 'BoboLabs'
            url = 'https://repo.bobolabs.net/repository/maven-releases/'
            credentials {
                username = project.property('bobolabs.user')
                password = project.property('bobolabs.key')
            }
        }
    }
    publications {
        shadow(MavenPublication) { publication ->
            groupId = project.group
            artifactId = project.name
            version = project.version

            project.shadow.component(publication)
        }
    }
}

shadowJar {
    archiveBaseName.set(project.name)
    archiveClassifier.set('')

    relocate 'net.md_5.bungee.config', 'net.bobolabs.libs.net.md_5.bungee.config'

    dependencies {
        exclude(dependency('com.google.guava:'))
        exclude(dependency('com.google.j2objc:'))
        exclude(dependency('com.google.errorprone:'))
        exclude(dependency('com.google.code.findbugs:'))
        exclude(dependency('org.checkerframework:'))
    }

    from "${project.rootDir}/LICENSE.txt"
}

license {
    header = project.file('HEADER.txt')
    include '**/*.java'

    properties {
        year = LocalDateTime.now().getYear()
        projectName = 'BoboConfig'
    }
}

tasks.jar.enabled = false
tasks.build.dependsOn(shadowJar)